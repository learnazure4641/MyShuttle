# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
  - stage: BuildMaven
    jobs:
    - job: BuildMaven
      steps:
      - task: Maven@3
        inputs:
          mavenPomFile: 'pom.xml'
          publishJUnitResults: true
          testResultsFiles: '**/surefire-reports/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.8'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3027m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
      - task: JFrogGenericArtifacts@1
        inputs:
          command: 'Upload'
          connection: 'artifactory'
          specSource: 'taskConfiguration'
          fileSpec: |
            {
              "files": [
                {
                  "pattern": "$(Build.SourcesDirectory)/target/*.war",
                  "target": "libs-snapshot-local"
                }
              ]
            }
          collectBuildInfo: true
          buildName: '$(Build.DefinitionName)'
          buildNumber: '$(Build.BuildNumber)'
          failNoOp: true
          insecureTls: true
  - stage: CollectBUildInfo
    jobs:
    - job: collectInfo
      steps:
      - task: JFrogPublishBuildInfo@1
        inputs:
          artifactoryConnection: 'artifactory'
          buildName: '$(Build.DefinitionName)'
          buildNumber: '$(Build.BuildNumber)'
    - job: CopyandPublishsql
      steps:
      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: |
            **/target/*.war
            **/*.sql
          TargetFolder: '$(build.artifactstagingdirectory)'
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'deploy'
          publishLocation: 'Container'